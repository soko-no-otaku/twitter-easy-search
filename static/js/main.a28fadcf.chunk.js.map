{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","App","classes","React","useState","inputKeyword","setInputKeyword","inputUsername","setInputUsername","selectedSinceDate","setSelectedSinceDate","selectedUntilDate","setSelectedUntilDate","Container","component","maxWidth","CssBaseline","className","Avatar","action","noValidate","TextField","fullWidth","value","onChange","event","target","id","label","autoFocus","InputProps","startAdornment","InputAdornment","position","utils","DateFnsUtils","DatePicker","format","date","KeyboardButtonProps","name","Button","type","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a28fadcf.chunk.js","sourcesContent":["import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport format from 'date-fns/format';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  DatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright Â© '}\r\n      <Link color=\"inherit\" href=\"https://github.com/soko-no-otaku/twitter-easy-search\">\r\n        soko-no-otaku\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  const [inputKeyword, setInputKeyword] = React.useState('');\r\n  const handleKeywordChange = (event) => {\r\n    setInputKeyword(event.target.value);\r\n  };\r\n\r\n  const [inputUsername, setInputUsername] = React.useState('');\r\n  const handleUsernameChange = (event) => {\r\n    setInputUsername(event.target.value);\r\n  };\r\n\r\n  const [selectedSinceDate, setSelectedSinceDate] = React.useState(new Date());\r\n  const handleSinceDateChange = (date) => {\r\n    setSelectedSinceDate(date);\r\n  };\r\n\r\n  const [selectedUntilDate, setSelectedUntilDate] = React.useState(new Date());\r\n  const handleUntilDateChange = (date) => {\r\n    setSelectedUntilDate(date);\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <TwitterIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Search\r\n        </Typography>\r\n        <form action=\"https://twitter.com/search\" className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            value={inputKeyword}\r\n            onChange={handleKeywordChange}\r\n            id=\"keyword\"\r\n            label=\"Keyword\"\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            value={inputUsername}\r\n            onChange={handleUsernameChange}\r\n            id=\"username\"\r\n            label=\"Username\"\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\">@</InputAdornment>,\r\n            }}\r\n          />\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <DatePicker\r\n              margin=\"normal\"\r\n              fullWidth\r\n              id=\"since\"\r\n              label=\"Since\"\r\n              format=\"yyyy-MM-dd\"\r\n              value={selectedSinceDate}\r\n              onChange={handleSinceDateChange}\r\n              KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n              }}\r\n            />\r\n            <DatePicker\r\n              margin=\"normal\"\r\n              fullWidth\r\n              id=\"until\"\r\n              label=\"Until\"\r\n              format=\"yyyy-MM-dd\"\r\n              value={selectedUntilDate}\r\n              onChange={handleUntilDateChange}\r\n              KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            value={`${inputKeyword} from:${inputUsername} since:${format(selectedSinceDate, \"yyyy-MM-dd\")} until:${format(selectedUntilDate, \"yyyy-MM-dd\")}`}\r\n            id=\"query\"\r\n            label=\"Query\"\r\n            name=\"q\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Search\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}